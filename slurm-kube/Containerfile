FROM registry.access.redhat.com/ubi8:8.10 AS build

RUN dnf makecache && \
    dnf -y update && \
    dnf -y group install "Development Tools" && \
    dnf -y install \
        git \
        openssl-devel \
        bzip2-devel \
        zlib-devel \
        # hdf5-devel \
        mariadb-devel \
        # libjwt-devel \
        # lua-devel \
        pam-devel \
        readline-devel \
        # http-parser-devel \
        json-c-devel \
        libyaml-devel \
        # hwljkoc-devel \
        # libbpf-devel \
        # dbus-devel \
        jansson-devel \
        lz4-devel

RUN git clone \
        --depth 1 --single-branch -b munge-0.5.16 \
        https://github.com/dun/munge.git && \
    pushd munge && \
    ./bootstrap && \
    ./configure && \
    make && \
    make install && \
    popd

# lua: Lua API
RUN curl -L -R -O https://www.lua.org/ftp/lua-5.4.7.tar.gz && \
    tar -zxf lua-5.4.7.tar.gz && \
    pushd lua-5.4.7 && \
    make all test && \
    make install INSTALL_TOP=/usr/local && \
    popd

# libjwt: auth/slurm, slurmrestd
RUN git clone \
        --depth 1 --single-branch -b v1.12.0 \
        https://github.com/benmcollins/libjwt.git && \
    pushd libjwt && \
    autoreconf --force --install && \
    ./configure && \
    make && \
    make install && \
    popd

# http-parser: slurmrestd
RUN git clone \
        --depth 1 --single-branch -b v2.9.4 \
        https://github.com/nodejs/http-parser.git && \
    pushd http-parser && \
    make && \
    make install && \
    popd

# For future consideration
# hdf5: acct_gather_profile/hdf5
# hwloc: task/cgroup
# libbpf: task/cgroup

RUN git clone \
        --depth 1 --single-branch -b slurm-24-11-1-1 \
        https://github.com/SchedMD/slurm.git && \
    pushd slurm && \
    ./configure \
        --enable-debug \
        --with-jwt=/usr/local/ \
        --with-http-parser=/usr/local/ && \
    make LDFLAGS="-Wl,-rpath,/usr/local/lib" && \
    make install && \
    popd

FROM registry.access.redhat.com/ubi8:8.10
COPY --from=build /usr/local /usr/local

RUN dnf makecache && \
    dnf -y update && \
    dnf -y install \
        openssl \
        bzip2 \
        zlib \
        # hdf5 \
        mariadb \
        # libjwt \
        # lua \
        pam \
        readline \
        # http-parser \
        json-c \
        libyaml \
        # hwljkoc \
        # libbpf \
        # dbus \
        jansson \
        lz4

# See: https://github.com/tianon/gosu INSTALL.md
ENV GOSU_VERSION 1.17
RUN set -eux; \
    \
    rpmArch="$(rpm --query --queryformat='%{ARCH}' rpm)"; \
    case "$rpmArch" in \
        aarch64) dpkgArch='arm64' ;; \
        armv[67]*) dpkgArch='armhf' ;; \
        i[3456]86) dpkgArch='i386' ;; \
        ppc64le) dpkgArch='ppc64el' ;; \
        riscv64 | s390x) dpkgArch="$rpmArch" ;; \
        x86_64) dpkgArch='amd64' ;; \
        *) echo >&2 "error: unknown/unsupported architecture '$rpmArch'"; exit 1 ;; \
    esac; \
    curl -L -o /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \
    curl -L -o /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; \
    \
# verify the signature
    export GNUPGHOME="$(mktemp -d)"; \
    gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \
    gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
    gpgconf --kill all; \
    rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; \
    \
    chmod +x /usr/local/bin/gosu; \
# verify that the binary works
    gosu --version; \
    gosu nobody true

COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
COPY slurm.conf /usr/local/etc/slurm.conf
COPY slurmdbd.conf /usr/local/etc/slurmdbd.conf
RUN groupadd -r --gid=213 slurm && \
    useradd -r -g slurm --uid 213 slurm && \
    groupadd -r --gid=530 munge && \
    useradd -r -g munge --uid 530 munge && \
    mkdir -p \
        /usr/local/var/spool/slurmd \
        /usr/local/var/spool/slurmctld \
        /usr/local/var/run/munge \
        /usr/local/var/lib/slurmd \
        /usr/local/var/log && \
    touch \
        /usr/local/var/lib/slurmd/node_state \
        /usr/local/var/lib/slurmd/front_end_state \
        /usr/local/var/lib/slurmd/job_state \
        /usr/local/var/lib/slurmd/resv_state \
        /usr/local/var/lib/slurmd/trigger_state \
        /usr/local/var/lib/slurmd/assoc_mgr_state \
        /usr/local/var/lib/slurmd/assoc_usage \
        /usr/local/var/lib/slurmd/qos_usage \
        /usr/local/var/lib/slurmd/fed_mgr_state \
        /usr/local/var/log/slurmdbd.log \
        /usr/local/var/run/slurmdbd.pid && \
    chown -R slurm:slurm /usr/local/var/*/slurm* && \
    chown -R slurm:slurm /usr/local/etc/slurm* && \
    chown munge:munge /usr/local/etc/munge && \
    chown munge:munge /usr/local/etc/sysconfig/munge && \
    chown munge:munge /usr/local/var/run/munge && \
    chown munge:munge /usr/local/var/log/munge && \
    chmod 600 /usr/local/etc/slurmdbd.conf && \
    chmod +x /usr/local/bin/docker-entrypoint.sh

RUN gosu munge /usr/local/sbin/mungekey --verbose

ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]
CMD ["slurmdbd"]
